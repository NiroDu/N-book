(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{198:function(e,t,_){e.exports=_.p+"assets/img/regex_1.5c2709a5.png"},199:function(e,t,_){e.exports=_.p+"assets/img/regex_2.61bad9af.png"},200:function(e,t,_){e.exports=_.p+"assets/img/regex_3.9b3661af.png"},201:function(e,t,_){e.exports=_.p+"assets/img/regex_4.a99539a4.png"},202:function(e,t,_){e.exports=_.p+"assets/img/regex_5.cb571fc7.png"},203:function(e,t,_){e.exports=_.p+"assets/img/regex_6.8ca9fd37.png"},204:function(e,t,_){e.exports=_.p+"assets/img/regex_7.f4338f10.png"},205:function(e,t,_){e.exports=_.p+"assets/img/regex_8.78d80a1b.png"},206:function(e,t,_){e.exports=_.p+"assets/img/regex_12.bc7cafff.png"},207:function(e,t,_){e.exports=_.p+"assets/img/regex_13.2d8520aa.png"},208:function(e,t,_){e.exports=_.p+"assets/img/regex_10.8230a107.png"},209:function(e,t,_){e.exports=_.p+"assets/img/regex_11.92fa395f.png"},210:function(e,t,_){e.exports=_.p+"assets/img/regex_14.92b10fff.png"},211:function(e,t,_){e.exports=_.p+"assets/img/regex_9.e8591177.png"},364:function(e,t,_){"use strict";_.r(t);var s=[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"正则表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[this._v("#")]),this._v(" 正则表达式")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"在线工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在线工具"}},[this._v("#")]),this._v(" 在线工具")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"基础知识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础知识"}},[this._v("#")]),this._v(" 基础知识")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("下面开始正式内容，在 Javascript 中，一个正则表达式以 "),t("code",[this._v("/")]),this._v(" 开头和结尾，所以 "),t("code",[this._v("/hello regexp/")]),this._v(" 就是一个正则表达式。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"flags（标志符或修饰符）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#flags（标志符或修饰符）"}},[this._v("#")]),this._v(" Flags（标志符或修饰符）")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Flags 写在结束的"),t("code",[this._v("/")]),this._v("之后，可以影响整个正则表达式的匹配行为。常见的 flags 有：")])},function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("ol",[_("li",[_("code",[e._v("g")]),e._v("：全局匹配（global）；正则表达式默认只会返回第一个匹配结果，使用标志符 g 则可以返回所有匹配。")]),e._v(" "),_("li",[_("code",[e._v("i")]),e._v("：忽略大小写（case-insensitive）；在匹配时忽略英文字母的大小写。")]),e._v(" "),_("li",[_("code",[e._v("m")]),e._v("：多行匹配（multiline）；将开始和结束字符（^和$）视为在多行上工作，即分别匹配每一行（由 \\n 或 \\r 分割）的开始和结束，而不只是只匹配整个输入字符串的最开始和最末尾处。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("所有的 flags 都打上的话，那就是"),t("code",[this._v("/^*$/gimsuy")]),this._v("：\n"),t("img",{attrs:{src:_(198),alt:"regex_1"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"character-sets（字符集合）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#character-sets（字符集合）"}},[this._v("#")]),this._v(" Character Sets（字符集合）")])},function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("ol",[_("li",[_("code",[e._v("[xyz]")]),e._v("：匹配 "),_("code",[e._v("x")]),e._v("或"),_("code",[e._v("y")]),e._v("或"),_("code",[e._v("z")]),e._v("。")]),e._v(" "),_("li",[_("code",[e._v("[^xyz]")]),e._v("：补集，匹配除了 "),_("code",[e._v("x")]),e._v(" "),_("code",[e._v("y")]),e._v(" "),_("code",[e._v("z")]),e._v("的其他字符。")]),e._v(" "),_("li",[_("code",[e._v("[a-z]")]),e._v("：匹配从 "),_("code",[e._v("a")]),e._v(" 到 "),_("code",[e._v("z")]),e._v(" 的任意字符。")]),e._v(" "),_("li",[_("code",[e._v("[^a-n]")]),e._v("：补集，匹配除了 "),_("code",[e._v("a")]),e._v(" 到 "),_("code",[e._v("n")]),e._v(" 的其他字符。")]),e._v(" "),_("li",[_("code",[e._v("[A-Z]")]),e._v("：匹配从 "),_("code",[e._v("A")]),e._v(" 到 "),_("code",[e._v("Z")]),e._v(" 的任意字符。")]),e._v(" "),_("li",[_("code",[e._v("[0-9]")]),e._v("：匹配从 "),_("code",[e._v("0")]),e._v(" 到 "),_("code",[e._v("9")]),e._v(" 的任意数字。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("匹配所有的字母和数字可写成："),t("code",[this._v("/[a-zA-Z0-9]/")]),this._v(" 或者 "),t("code",[this._v("/[a-z0-9]/i")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"quantifiers-量词"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#quantifiers-量词"}},[this._v("#")]),this._v(" Quantifiers (量词)")])},function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("ol",[_("li",[_("code",[e._v("{n}")]),e._v("：匹配 "),_("code",[e._v("n")]),e._v(" 次。")]),e._v(" "),_("li",[_("code",[e._v("{n,m}")]),e._v("：匹配 "),_("code",[e._v("n到m")]),e._v(" 次。")]),e._v(" "),_("li",[_("code",[e._v("{n,}")]),e._v("：匹配 "),_("code",[e._v(">=n")]),e._v(" 次，即"),_("code",[e._v("大于n")]),e._v("次。")]),e._v(" "),_("li",[_("code",[e._v("?")]),e._v("：匹配 "),_("code",[e._v("0 || 1")]),e._v(" 次，即 "),_("code",[e._v("0或者1")]),e._v(" 次。")]),e._v(" "),_("li",[_("code",[e._v("*")]),e._v("：匹配 "),_("code",[e._v(">=0")]),e._v(" 次，等价于 "),_("code",[e._v("{0,}")]),e._v("。")]),e._v(" "),_("li",[_("code",[e._v("+")]),e._v("：匹配 "),_("code",[e._v(">=1")]),e._v(" 次，等价于 "),_("code",[e._v("{1,}")]),e._v("。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("如字段"),t("code",[this._v("abczzzzzzzxyabcabcabc")]),this._v("，使用"),t("code",[this._v("/z*xy/gi")]),this._v("，会匹配出"),t("code",[this._v("zzzzzzzxy")]),this._v("；")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("使用"),t("code",[this._v("/z{0,2}xy/gi")]),this._v("，会匹配出"),t("code",[this._v("zzxy")]),this._v("；")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"metacharacters（元字符）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#metacharacters（元字符）"}},[this._v("#")]),this._v(" Metacharacters（元字符）")])},function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("ol",[_("li",[_("code",[e._v("\\d")]),e._v("：匹配任意数字，等价于 "),_("code",[e._v("[0-9]")]),e._v("。")]),e._v(" "),_("li",[_("code",[e._v("\\D")]),e._v("：匹配任意非数字字符；"),_("code",[e._v("\\d")]),e._v(" 的补集。")]),e._v(" "),_("li",[_("code",[e._v("\\w")]),e._v("：匹配任意基本拉丁字母表中的字母和数字，以及下划线；等价于 "),_("code",[e._v("[A-Za-z0-9_]")]),e._v("。")]),e._v(" "),_("li",[_("code",[e._v("\\W")]),e._v("：匹配任意非基本拉丁字母表中的字母和数字，以及下划线；"),_("code",[e._v("\\w")]),e._v(" 的补集。")]),e._v(" "),_("li",[_("code",[e._v("\\s")]),e._v("：匹配一个空白符，包括空格、制表符、换页符、换行符和其他 Unicode 空格。")]),e._v(" "),_("li",[_("code",[e._v("\\S")]),e._v("：匹配一个非空白符；"),_("code",[e._v("\\s")]),e._v(" 的补集。")]),e._v(" "),_("li",[_("code",[e._v("\\b")]),e._v("：匹配一个零宽单词边界，如一个字母与一个空格之间；例如，"),_("code",[e._v("/\\bno/")]),e._v("匹配 "),_("code",[e._v("at noon")]),e._v(" 中的 "),_("code",[e._v("no")]),e._v("，"),_("code",[e._v("/ly\\b/")]),e._v(" 匹配 "),_("code",[e._v("possibly yesterday.")]),e._v(" 中的 "),_("code",[e._v("ly")]),e._v("。")]),e._v(" "),_("li",[_("code",[e._v("\\B")]),e._v("：匹配一个零宽非单词边界，如两个字母之间或两个空格之间；例如，"),_("code",[e._v("/\\Bon/")]),e._v(" 匹配 "),_("code",[e._v("at noon")]),e._v(" 中的 "),_("code",[e._v("on")]),e._v("，"),_("code",[e._v("/ye\\B/")]),e._v(" 匹配 "),_("code",[e._v("possibly yesterday.")]),e._v(" 中的 "),_("code",[e._v("ye")]),e._v("。")]),e._v(" "),_("li",[_("code",[e._v("\\t")]),e._v("：匹配一个水平制表符（tab)。")]),e._v(" "),_("li",[_("code",[e._v("\\n")]),e._v("：匹配一个换行符（newline)。")]),e._v(" "),_("li",[_("code",[e._v("\\r")]),e._v("：匹配一个回车符（carriage return)。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"理解-b-零宽单词边界"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#理解-b-零宽单词边界"}},[this._v("#")]),this._v(" 理解"),t("code",[this._v("\\b 零宽单词边界")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们看以下的匹配：\n"),t("img",{attrs:{src:_(199),alt:"regex_2"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上图中，紫红色竖线表示的位置就是零宽单词边界（Matches a zero-width word boundary），说白了，就是一个字母的两侧是否有空格，我们输入内容，就知道匹配的是什么了：\n"),t("img",{attrs:{src:_(200),alt:"regex_3"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"special-characters-特殊字符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#special-characters-特殊字符"}},[this._v("#")]),this._v(" Special Characters (特殊字符)")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("正则中存在一些特殊字符，它们不会按照字面意思进行匹配，而有特殊的意义，比如前文讲过用于量词的"),t("code",[this._v("?")]),this._v("、"),t("code",[this._v("*")]),this._v("、"),t("code",[this._v("+")]),this._v("。")])},function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("ol",[_("li",[_("code",[e._v("\\")]),e._v("：转义字符，可以将普通字符转成特殊字符。比如"),_("code",[e._v("\\w")]),e._v("；也可以将特殊字符转成字面意思，比如 "),_("code",[e._v("\\+")]),e._v(" 匹配 "),_("code",[e._v("+")]),e._v("。")]),e._v(" "),_("li",[_("code",[e._v(".")]),e._v("：匹配任意单个字符，但是换行符除外："),_("code",[e._v("\\n")]),e._v(", "),_("code",[e._v("\\r")]),e._v(", "),_("code",[e._v("\\u2028")]),e._v(" 或 "),_("code",[e._v("\\u2029")]),e._v("；在字符集中"),_("code",[e._v("[.]")]),e._v("，无特殊含义，即表示 "),_("code",[e._v(".")]),e._v(" 的字面意思。")]),e._v(" "),_("li",[_("code",[e._v("|")]),e._v("：替换字符（alternate character），匹配 "),_("code",[e._v("|")]),e._v(" 前或后的表达式。比如需要同时匹配 "),_("code",[e._v("bear")]),e._v(" 和 "),_("code",[e._v("pear")]),e._v("，可以使用 "),_("code",[e._v("/(b|p)ear/")]),e._v(" 或者 "),_("code",[e._v("/bear|pear/")]),e._v("；但是不能用 "),_("code",[e._v("/b|pear/")]),e._v("，该表达式只能匹配 "),_("code",[e._v("b")]),e._v(" 和 "),_("code",[e._v("pear")]),e._v("。")]),e._v(" "),_("li",[_("code",[e._v("^")]),e._v("：匹配输入的开始。比如，"),_("code",[e._v("/^A/")]),e._v(" 不匹配 "),_("code",[e._v("an Apple")]),e._v(" 中的 "),_("code",[e._v("A")]),e._v("，但匹配 "),_("code",[e._v("An apple")]),e._v(" 中的 "),_("code",[e._v("A")]),e._v("。")]),e._v(" "),_("li",[_("code",[e._v("$")]),e._v("：匹配输入的结尾。比如，"),_("code",[e._v("/t$/")]),e._v(" 不匹配 "),_("code",[e._v("eater")]),e._v(" 中的 "),_("code",[e._v("t")]),e._v("，但匹配 "),_("code",[e._v("eat")]),e._v(" 中的 "),_("code",[e._v("t")]),e._v("。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("^")]),this._v(" 和 "),t("code",[this._v("$")]),this._v(" 在表单验证时常需要使用，因为需要验证从开始到结尾的一个完整输入，而不是匹配输入中的某一段。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"groups（分组）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#groups（分组）"}},[this._v("#")]),this._v(" Groups（分组）")])},function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("ol",[_("li",[_("code",[e._v("(xyz)")]),e._v("：捕获分组（Capturing Group），匹配并捕获匹配项；例如，"),_("code",[e._v("/(foo)/")]),e._v(" 匹配且捕获 "),_("code",[e._v("foo bar.")]),e._v(" 中的 "),_("code",[e._v("foo")]),e._v("。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("被匹配的子字符串可以在结果数组的元素 "),t("code",[this._v("[1], ..., [n]")]),this._v(" 中找到，或在被定义的 RegExp 对象的属性 "),t("code",[this._v("$1, ..., $9")]),this._v(" 中找到。")])},function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("ol",{attrs:{start:"2"}},[_("li",[_("code",[e._v("(?:xyz)")]),e._v("：非捕获分组（Non-capturing Group），匹配但不会捕获匹配项；匹配项不能再次被访问到。")]),e._v(" "),_("li",[_("code",[e._v("\\n")]),e._v("：n 是一个正整数，表示反向引用（back reference），指向正则表达式中第 n 个括号（从左开始数）中匹配的子字符串；例如，"),_("code",[e._v("/apple(,)\\sorange\\1/")]),e._v(" 匹配 "),_("code",[e._v("apple, orange, cherry, peach.")]),e._v(" 中的 "),_("code",[e._v("apple, orange,")]),e._v("。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"我们来理解一下：“非捕获分组（non-capturing-group）”是什么意思？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#我们来理解一下：“非捕获分组（non-capturing-group）”是什么意思？"}},[this._v("#")]),this._v(" 我们来理解一下：“非捕获分组（Non-capturing Group）”是什么意思？")])},function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("div",{staticClass:"language-js line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" string "),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[e._v('"at noonfooasfodsoo"')]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" regex "),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token regex"}},[e._v("/(foo)/gi")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" c1 "),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" regex"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[e._v("exec")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("string"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" regex1 "),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token regex"}},[e._v("/(?:foo)/gi")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" c2 "),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" regex1"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[e._v("exec")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("string"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[e._v("1")]),_("br"),_("span",{staticClass:"line-number"},[e._v("2")]),_("br"),_("span",{staticClass:"line-number"},[e._v("3")]),_("br"),_("span",{staticClass:"line-number"},[e._v("4")]),_("br"),_("span",{staticClass:"line-number"},[e._v("5")]),_("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("看看输出结果"),t("code",[this._v("c1")]),this._v("和"),t("code",[this._v("c2")]),this._v("值的区别：\n"),t("img",{attrs:{src:_(201),alt:"regex_4"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("返回的数组中少了"),t("code",[this._v("[1]")]),this._v("的内容，我们到 regex101 上去也看看区别：\n"),t("img",{attrs:{src:_(202),alt:"regex_5"}}),this._v(" "),t("img",{attrs:{src:_(203),alt:"regex_6"}}),this._v("\n所以使用"),t("code",[this._v("(?:xyz)")]),this._v("，意思是匹配并但不会捕获匹配项到 Group 中。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"我们再来理解什么是“反向引用（back-reference）”"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#我们再来理解什么是“反向引用（back-reference）”"}},[this._v("#")]),this._v(" 我们再来理解什么是“反向引用（back reference）”")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("如上例，"),s("code",[e._v("/apple(,)\\sorange\\1/")]),e._v("中的"),s("code",[e._v("\\1")]),e._v("指的其实就是"),s("code",[e._v("(,)")]),e._v("，这个表达式等同的写法是"),s("code",[e._v("/apple(,)\\sorange(,)/")]),e._v(" "),s("img",{attrs:{src:_(204),alt:"regex_7"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们试试"),t("code",[this._v("\\2")]),this._v("，也就是等价于左数第二个括号中的内容，看看匹配到的内容，我们在文本内容中再多加一个"),t("code",[this._v(",")]),this._v("：\n"),t("img",{attrs:{src:_(205),alt:"regex_8"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"assertion（断言）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#assertion（断言）"}},[this._v("#")]),this._v(" Assertion（断言）")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",[t("li",[t("code",[this._v("x(?=y)")]),this._v("：仅匹配被 y 跟随的 x，这个也被称为：“先行断言”/“正向肯定查找”")])])},function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("p",[e._v("例如，"),_("code",[e._v("/bruce(?=wayne)/")]),e._v("，如果"),_("code",[e._v("bruce")]),e._v("后面跟着"),_("code",[e._v("wayne")]),e._v("，则匹配"),_("code",[e._v("bruce")]),e._v("。")])},function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("p",[_("code",[e._v("/bruce(?=wayne|banner)/")]),e._v("，如果"),_("code",[e._v("bruce")]),e._v("后面跟着"),_("code",[e._v("wayne")]),e._v("或者"),_("code",[e._v("banner")]),e._v("，则匹配"),_("code",[e._v("bruce")]),e._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("wayne")]),this._v(" 和 "),t("code",[this._v("banner")]),this._v(" 都不会在匹配结果中出现。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",{attrs:{start:"2"}},[t("li",[t("code",[this._v("(?<=y)x")]),this._v("：匹配'x'仅当'x'前面是'y'，这个也被称为：“后行断言”")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("例如，"),s("code",[e._v("(?<=bruce)wayne")]),e._v("，如果"),s("code",[e._v("wayne")]),e._v("前面是"),s("code",[e._v("bruce")]),e._v("，则匹配"),s("code",[e._v("wayne")]),e._v("。\n"),s("img",{attrs:{src:_(206),alt:"regex_12"}})])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[s("code",[e._v("/(?<=bruce|banner)wayne/")]),e._v("，如果"),s("code",[e._v("wayne")]),e._v("前面是"),s("code",[e._v("bruce")]),e._v("或者"),s("code",[e._v("banner")]),e._v("，则匹配"),s("code",[e._v("wayne")]),e._v("。\n"),s("img",{attrs:{src:_(207),alt:"regex_13"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("wayne")]),this._v(" 和 "),t("code",[this._v("banner")]),this._v(" 都不会在匹配结果中出现。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",{attrs:{start:"3"}},[t("li",[t("code",[this._v("x(?!y)")]),this._v("：仅匹配不被 y 跟随的 x，这个也被称为：“正向否定查找”")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("例如，"),t("code",[this._v("/\\d+(?!\\.)/")]),this._v(' 只会匹配不被 "." 跟随的数字。')])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("/\\d+(?!\\.)/.exec('3.141')")]),this._v(" 匹配 "),t("code",[this._v("141")]),this._v("，而不是 "),t("code",[this._v("3.141")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"非贪婪匹配（non-greedy）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非贪婪匹配（non-greedy）"}},[this._v("#")]),this._v(" 非贪婪匹配（non-greedy）")])},function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("p",[e._v("默认情况下，正则表达式的量词"),_("code",[e._v("*")]),e._v("、"),_("code",[e._v("+")]),e._v("、"),_("code",[e._v("？")]),e._v("、"),_("code",[e._v("{}")]),e._v("，都是进行贪婪匹配（greedy），即匹配尽可能多的字符。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("怎么理解呢？\n例如这么一段话："),t("code",[this._v("The reading of all good books is like a conversation with the finest men of past centuries.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("使用"),t("code",[this._v("/.+\\s/")]),this._v("匹配，"),t("code",[this._v(".")]),this._v("可以匹配任意字符，而"),t("code",[this._v("+")]),this._v("表示匹配 1 次或者多次，默认是贪婪匹配，所以会匹配到了最后一个空格符才结束。\n"),t("img",{attrs:{src:_(208),alt:"regex_10"}})])},function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("p",[e._v("而当我们在量词"),_("code",[e._v("*")]),e._v("、"),_("code",[e._v("+")]),e._v("、"),_("code",[e._v("？")]),e._v("、"),_("code",[e._v("{}")]),e._v("后面紧跟着一个"),_("code",[e._v("?")]),e._v("，就可以实现非贪婪匹配。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("例如"),t("code",[this._v("/.+?\\s/")]),this._v("，匹配到第一个空格符就会结束：\n"),t("img",{attrs:{src:_(209),alt:"regex_11"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"多行匹配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多行匹配"}},[this._v("#")]),this._v(" 多行匹配")])},function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("May God bless and keep you always,\nmay your wishes all come true,\nmay you always do for others\nand let others do for you.\nmay you build a ladder to the stars\nand climb on every rung,\nmay you stay forever young,\nforever young, forever young,\nMay you stay forever young.\n")])]),e._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[e._v("1")]),_("br"),_("span",{staticClass:"line-number"},[e._v("2")]),_("br"),_("span",{staticClass:"line-number"},[e._v("3")]),_("br"),_("span",{staticClass:"line-number"},[e._v("4")]),_("br"),_("span",{staticClass:"line-number"},[e._v("5")]),_("br"),_("span",{staticClass:"line-number"},[e._v("6")]),_("br"),_("span",{staticClass:"line-number"},[e._v("7")]),_("br"),_("span",{staticClass:"line-number"},[e._v("8")]),_("br"),_("span",{staticClass:"line-number"},[e._v("9")]),_("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("如何匹配以 forever 开头的那句歌词"),t("code",[this._v("forever young, forever young")]),this._v("呢？")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("写"),t("code",[this._v("/^forever.+/")]),this._v("是错误的，因为"),t("code",[this._v("^")]),this._v("匹配的整个字符串的开始，而是不是每一行的开始。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("所以指定"),s("code",[e._v("m")]),e._v("选项，即可支持多行匹配，这时"),s("code",[e._v("^")]),e._v("和"),s("code",[e._v("$")]),e._v("匹配的是每一行的开始和结束，因此正确的正则表达式是"),s("code",[e._v("/^forever.+/m")]),e._v("：\n"),s("img",{attrs:{src:_(210),alt:"regex_14"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"应用例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用例子"}},[this._v("#")]),this._v(" 应用例子")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_1-匹配手机号码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-匹配手机号码"}},[this._v("#")]),this._v(" 1. 匹配手机号码")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("匹配"),t("code",[this._v("1(3/4/5/7/8)开头的11位数字")]),this._v("。")])},function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("ol",[_("li",[e._v("以 1 开头："),_("code",[e._v("/^1/")])]),e._v(" "),_("li",[e._v("第 2 位为 3、4、5、7、8 中的一个："),_("code",[e._v("/[34578]/")]),e._v(" 或 "),_("code",[e._v("/(3|4|5|7|8)/")])]),e._v(" "),_("li",[e._v("剩余 3-11 位均为数字，并以数字结尾："),_("code",[e._v("/\\d{9}$/")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("组合起来即为 "),t("code",[this._v("/^1[34578]\\d{9}$/")]),this._v(" 或 "),t("code",[this._v("/^1(3|4|5|7|8)\\d{9}$/")]),this._v("，因为使用捕获括号存在性能损失，所以推荐使用第一种写法。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_2-匹配电子邮件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-匹配电子邮件"}},[this._v("#")]),this._v(" 2. 匹配电子邮件")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("标准的电子邮件组成为 "),t("code",[this._v("<yourname>@<domain>.<extension><optional-extension>")]),this._v("。")])},function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("ol",[_("li",[_("code",[e._v("yourname")]),e._v("：任意英文字母（a-z/A-Z）、数字（0-9）、下划线（_）、英文句点（.）、连字符（-），长度大于 0")]),e._v(" "),_("li",[_("code",[e._v("domain")]),e._v("：任意英文字母（a-z/A-Z）、数字（0-9）、连字符（-），长度大于 0")]),e._v(" "),_("li",[_("code",[e._v("extension")]),e._v("：任意英文字母（a-z/A-Z），长度 2-8")]),e._v(" "),_("li",[_("code",[e._v("optional-extension")]),e._v('："."开头，后面跟任意英文字母（a-z/A-Z），长度 2-8，可选')])])},function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("ol",[_("li",[_("code",[e._v("yourname")]),e._v("："),_("code",[e._v("/[a-z\\d._-]+/")])]),e._v(" "),_("li",[_("code",[e._v("domain")]),e._v("："),_("code",[e._v("/[a-z\\d-]+/")])]),e._v(" "),_("li",[_("code",[e._v("extension")]),e._v("："),_("code",[e._v("/[a-z]{2,8}/")])]),e._v(" "),_("li",[_("code",[e._v("optional-extension")]),e._v("："),_("code",[e._v("/(\\.[a-z]{2,8})?/")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("组合起来形成最后的正则表达式："),t("code",[this._v("/^([a-z\\d._-]+)@([a-z\\d-]+)\\.([a-z]{2,8})(\\.[a-z]{2,8})?$/ig")]),this._v("；为了增加可读性可以将每部分用"),t("code",[this._v("()")]),this._v("包起来，并不要忘记起始和结束符"),t("code",[this._v("^$")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:_(211),alt:"regex_9"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"参考文章"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[this._v("#")]),this._v(" 参考文章")])}],v=_(0),r=Object(v.a)({},(function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("div",{staticClass:"content"},[e._m(0),e._v(" "),e._m(1),e._v(" "),_("p",[_("a",{attrs:{href:"https://regex101.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("regex101"),_("OutboundLink")],1)]),e._v(" "),_("p",[e._v("正则的在线工具只推荐regex101，解释正则表达式、显示匹配信息、提供常用语法参考等，足够强大和界面友好。")]),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),_("p",[e._v("正则中有几个大类需要了解：Flags、Character Sets、Quantifiers、Metacharacters、Special Characters、Groups、Assertion，下面我们一一来讲解。")]),e._v(" "),e._m(4),e._v(" "),e._m(5),e._v(" "),e._m(6),e._v(" "),e._m(7),e._v(" "),e._m(8),e._v(" "),_("p",[e._v("用于匹配字符集合中的任意一个字符。")]),e._v(" "),e._m(9),e._v(" "),e._m(10),e._v(" "),e._m(11),e._v(" "),_("p",[e._v("使用 Quantifiers 来实现重复匹配。")]),e._v(" "),e._m(12),e._v(" "),e._m(13),e._v(" "),e._m(14),e._v(" "),e._m(15),e._v(" "),_("p",[e._v("在正则表达式中有一些具有特殊含义的字母，被称为元字符，简言之，元字符就是描述字符的字符，它用于对字符表达式的内容、转换及各种操作信息进行描述。")]),e._v(" "),_("p",[e._v("常见的元字符有：")]),e._v(" "),e._m(16),e._v(" "),e._m(17),e._v(" "),e._m(18),e._v(" "),e._m(19),e._v(" "),e._m(20),e._v(" "),e._m(21),e._v(" "),_("p",[e._v("其他常见的特殊字符有：")]),e._v(" "),e._m(22),e._v(" "),e._m(23),e._v(" "),e._m(24),e._v(" "),e._m(25),e._v(" "),e._m(26),e._v(" "),e._m(27),e._v(" "),_("hr"),e._v(" "),e._m(28),e._v(" "),_("p",[e._v("先执行如下代码：")]),e._v(" "),e._m(29),e._m(30),e._v(" "),e._m(31),e._v(" "),_("hr"),e._v(" "),e._m(32),e._v(" "),e._m(33),e._v(" "),e._m(34),e._v(" "),e._m(35),e._v(" "),e._m(36),e._v(" "),e._m(37),e._v(" "),e._m(38),e._v(" "),e._m(39),e._v(" "),e._m(40),e._v(" "),e._m(41),e._v(" "),e._m(42),e._v(" "),e._m(43),e._v(" "),e._m(44),e._v(" "),e._m(45),e._v(" "),e._m(46),e._v(" "),e._m(47),e._v(" "),e._m(48),e._v(" "),_("p",[e._v("非贪婪匹配，即匹配尽量少的字符(matching the fewest possible characters)。")]),e._v(" "),e._m(49),e._v(" "),e._m(50),e._v(" "),e._m(51),e._v(" "),e._m(52),e._v(" "),e._m(53),e._v(" "),_("p",[e._v("例如下面一段文字：")]),e._v(" "),e._m(54),e._m(55),e._v(" "),e._m(56),e._v(" "),e._m(57),e._v(" "),e._m(58),e._v(" "),e._m(59),e._v(" "),e._m(60),e._v(" "),e._m(61),e._v(" "),e._m(62),e._v(" "),e._m(63),e._v(" "),e._m(64),e._v(" "),_("p",[e._v("每部分的格式标准为：")]),e._v(" "),e._m(65),e._v(" "),_("p",[e._v("每部分的正则表达式为：")]),e._v(" "),e._m(66),e._v(" "),e._m(67),e._v(" "),e._m(68),e._v(" "),_("p",[e._v("掌握上面所说的这些内容，日常使用的正则基本不会有什么问题了。")]),e._v(" "),e._m(69),e._v(" "),_("p",[_("a",{attrs:{href:"https://segmentfault.com/a/1190000018489883",target:"_blank",rel:"noopener noreferrer"}},[e._v("segmentfault"),_("OutboundLink")],1),e._v(" "),_("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions",target:"_blank",rel:"noopener noreferrer"}},[e._v("MDN"),_("OutboundLink")],1)])])}),s,!1,null,null,null);t.default=r.exports}}]);